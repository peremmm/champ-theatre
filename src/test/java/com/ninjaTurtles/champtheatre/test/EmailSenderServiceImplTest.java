package com.ninjaTurtles.champtheatre.test;

import com.ninjaTurtles.champtheatre.models.Employee;
import com.ninjaTurtles.champtheatre.models.EmployeeAccount;
import com.ninjaTurtles.champtheatre.models.Reservation;
import com.ninjaTurtles.champtheatre.service.impl.EmailSenderServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;

import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.mockito.Mockito.*;

public class EmailSenderServiceImplTest {

    @Mock
    private JavaMailSender mailSender;

    private EmailSenderServiceImpl emailSenderService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        emailSenderService = new EmailSenderServiceImpl(mailSender);
        //when(mailSender.createMimeMessage()).thenReturn(new MimeMessage((Session) null));
    }


    @Test
    public void testSendAutoGeneratedPassword() throws MessagingException {
        Employee employee = new Employee();
        employee.setEmail("example@example.com");

        EmployeeAccount account = new EmployeeAccount();
        account.setPassword("generatedPassword");

        MimeMessage mimeMessage = new MimeMessage((Session) null);
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, true);
        messageHelper.setTo(employee.getEmail());
        messageHelper.setSubject("Auto-generated Password");
        messageHelper.setText("Your auto-generated password is: generatedPassword");

        //when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        emailSenderService.sendAutoGeneratedPassword(employee, account);

        verify(mailSender).send(mimeMessage);
    }


    @Test
    public void testSendReserveStatusUpdate() throws MessagingException {
        Reservation reservation = new Reservation();
        reservation.setStatus(Reservation.Status.APPROVED);

        Employee employee = new Employee();
        employee.setEmail("example@example.com");

        MimeMessage mimeMessage = new MimeMessage((Session) null);
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, true);
        messageHelper.setTo(employee.getEmail());
        messageHelper.setSubject("Reservation Status Update");
        messageHelper.setText("Your reservation status is now: CONFIRMED");

        //when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        emailSenderService.sendReserveStatusUpdate(reservation, employee);

        verify(mailSender).send(mimeMessage);
    }

    @Test
    public void testSendPasswordChange() throws MessagingException {
        Employee employee = new Employee();
        employee.setEmail("example@example.com");

        MimeMessage mimeMessage = new MimeMessage((Session) null);
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, true);
        messageHelper.setTo(employee.getEmail());
        messageHelper.setSubject("Password Change Notification");
        messageHelper.setText("Your password has been changed successfully.");

        //when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        emailSenderService.sendPasswordChange(employee);

        verify(mailSender).send(mimeMessage);
    }

    @Test
    public void testSendReservationConfirmation() throws MessagingException, ParseException {
        // Create a reservation and employee object for testing
        Reservation reservation = new Reservation();
        reservation.setEventDate(new Date());

        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
        Date startTime = timeFormat.parse("18:00");
        reservation.setStartTime(startTime);

        Date endTime = timeFormat.parse("20:00");
        reservation.setEndTime(endTime);

        Employee employee = new Employee();
        employee.setEmail("test@example.com");
        employee.setFirstName("John");

        MimeMessage mimeMessage = new MimeMessage((Session) null);
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);

        MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, true);
        messageHelper.setTo(employee.getEmail());
        messageHelper.setSubject("Reservation Confirmation");
        messageHelper.setText("Dear " + employee.getFirstName() + ",\n\n" +
                "Your reservation has been confirmed successfully.\n\n" +
                "Reservation Details:\n" +
                "Date: " + reservation.getEventDate() + "\n" +
                "Time: " + reservation.getStartTime() + " - " + reservation.getEndTime() + "\n");

        emailSenderService.sendReservationConfirmation(reservation, employee);

        verify(mailSender).send(mimeMessage);
    }

}
